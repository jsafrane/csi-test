// Automatically generated by MockGen. DO NOT EDIT!
// Source: /home/jsafrane/project/go/src/github.com/container-storage-interface/spec/lib/go/csi/csi.pb.go

package driver

import (
	. "github.com/container-storage-interface/spec/lib/go/csi"
	gomock "github.com/golang/mock/gomock"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Mock of isGetSupportedVersionsResponse_Reply interface
type MockisGetSupportedVersionsResponse_Reply struct {
	ctrl     *gomock.Controller
	recorder *_MockisGetSupportedVersionsResponse_ReplyRecorder
}

// Recorder for MockisGetSupportedVersionsResponse_Reply (not exported)
type _MockisGetSupportedVersionsResponse_ReplyRecorder struct {
	mock *MockisGetSupportedVersionsResponse_Reply
}

func NewMockisGetSupportedVersionsResponse_Reply(ctrl *gomock.Controller) *MockisGetSupportedVersionsResponse_Reply {
	mock := &MockisGetSupportedVersionsResponse_Reply{ctrl: ctrl}
	mock.recorder = &_MockisGetSupportedVersionsResponse_ReplyRecorder{mock}
	return mock
}

func (_m *MockisGetSupportedVersionsResponse_Reply) EXPECT() *_MockisGetSupportedVersionsResponse_ReplyRecorder {
	return _m.recorder
}

func (_m *MockisGetSupportedVersionsResponse_Reply) isGetSupportedVersionsResponse_Reply() {
	_m.ctrl.Call(_m, "isGetSupportedVersionsResponse_Reply")
}

func (_mr *_MockisGetSupportedVersionsResponse_ReplyRecorder) isGetSupportedVersionsResponse_Reply() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "isGetSupportedVersionsResponse_Reply")
}

// Mock of isGetPluginInfoResponse_Reply interface
type MockisGetPluginInfoResponse_Reply struct {
	ctrl     *gomock.Controller
	recorder *_MockisGetPluginInfoResponse_ReplyRecorder
}

// Recorder for MockisGetPluginInfoResponse_Reply (not exported)
type _MockisGetPluginInfoResponse_ReplyRecorder struct {
	mock *MockisGetPluginInfoResponse_Reply
}

func NewMockisGetPluginInfoResponse_Reply(ctrl *gomock.Controller) *MockisGetPluginInfoResponse_Reply {
	mock := &MockisGetPluginInfoResponse_Reply{ctrl: ctrl}
	mock.recorder = &_MockisGetPluginInfoResponse_ReplyRecorder{mock}
	return mock
}

func (_m *MockisGetPluginInfoResponse_Reply) EXPECT() *_MockisGetPluginInfoResponse_ReplyRecorder {
	return _m.recorder
}

func (_m *MockisGetPluginInfoResponse_Reply) isGetPluginInfoResponse_Reply() {
	_m.ctrl.Call(_m, "isGetPluginInfoResponse_Reply")
}

func (_mr *_MockisGetPluginInfoResponse_ReplyRecorder) isGetPluginInfoResponse_Reply() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "isGetPluginInfoResponse_Reply")
}

// Mock of isCreateVolumeResponse_Reply interface
type MockisCreateVolumeResponse_Reply struct {
	ctrl     *gomock.Controller
	recorder *_MockisCreateVolumeResponse_ReplyRecorder
}

// Recorder for MockisCreateVolumeResponse_Reply (not exported)
type _MockisCreateVolumeResponse_ReplyRecorder struct {
	mock *MockisCreateVolumeResponse_Reply
}

func NewMockisCreateVolumeResponse_Reply(ctrl *gomock.Controller) *MockisCreateVolumeResponse_Reply {
	mock := &MockisCreateVolumeResponse_Reply{ctrl: ctrl}
	mock.recorder = &_MockisCreateVolumeResponse_ReplyRecorder{mock}
	return mock
}

func (_m *MockisCreateVolumeResponse_Reply) EXPECT() *_MockisCreateVolumeResponse_ReplyRecorder {
	return _m.recorder
}

func (_m *MockisCreateVolumeResponse_Reply) isCreateVolumeResponse_Reply() {
	_m.ctrl.Call(_m, "isCreateVolumeResponse_Reply")
}

func (_mr *_MockisCreateVolumeResponse_ReplyRecorder) isCreateVolumeResponse_Reply() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "isCreateVolumeResponse_Reply")
}

// Mock of isVolumeCapability_AccessType interface
type MockisVolumeCapability_AccessType struct {
	ctrl     *gomock.Controller
	recorder *_MockisVolumeCapability_AccessTypeRecorder
}

// Recorder for MockisVolumeCapability_AccessType (not exported)
type _MockisVolumeCapability_AccessTypeRecorder struct {
	mock *MockisVolumeCapability_AccessType
}

func NewMockisVolumeCapability_AccessType(ctrl *gomock.Controller) *MockisVolumeCapability_AccessType {
	mock := &MockisVolumeCapability_AccessType{ctrl: ctrl}
	mock.recorder = &_MockisVolumeCapability_AccessTypeRecorder{mock}
	return mock
}

func (_m *MockisVolumeCapability_AccessType) EXPECT() *_MockisVolumeCapability_AccessTypeRecorder {
	return _m.recorder
}

func (_m *MockisVolumeCapability_AccessType) isVolumeCapability_AccessType() {
	_m.ctrl.Call(_m, "isVolumeCapability_AccessType")
}

func (_mr *_MockisVolumeCapability_AccessTypeRecorder) isVolumeCapability_AccessType() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "isVolumeCapability_AccessType")
}

// Mock of isDeleteVolumeResponse_Reply interface
type MockisDeleteVolumeResponse_Reply struct {
	ctrl     *gomock.Controller
	recorder *_MockisDeleteVolumeResponse_ReplyRecorder
}

// Recorder for MockisDeleteVolumeResponse_Reply (not exported)
type _MockisDeleteVolumeResponse_ReplyRecorder struct {
	mock *MockisDeleteVolumeResponse_Reply
}

func NewMockisDeleteVolumeResponse_Reply(ctrl *gomock.Controller) *MockisDeleteVolumeResponse_Reply {
	mock := &MockisDeleteVolumeResponse_Reply{ctrl: ctrl}
	mock.recorder = &_MockisDeleteVolumeResponse_ReplyRecorder{mock}
	return mock
}

func (_m *MockisDeleteVolumeResponse_Reply) EXPECT() *_MockisDeleteVolumeResponse_ReplyRecorder {
	return _m.recorder
}

func (_m *MockisDeleteVolumeResponse_Reply) isDeleteVolumeResponse_Reply() {
	_m.ctrl.Call(_m, "isDeleteVolumeResponse_Reply")
}

func (_mr *_MockisDeleteVolumeResponse_ReplyRecorder) isDeleteVolumeResponse_Reply() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "isDeleteVolumeResponse_Reply")
}

// Mock of isControllerPublishVolumeResponse_Reply interface
type MockisControllerPublishVolumeResponse_Reply struct {
	ctrl     *gomock.Controller
	recorder *_MockisControllerPublishVolumeResponse_ReplyRecorder
}

// Recorder for MockisControllerPublishVolumeResponse_Reply (not exported)
type _MockisControllerPublishVolumeResponse_ReplyRecorder struct {
	mock *MockisControllerPublishVolumeResponse_Reply
}

func NewMockisControllerPublishVolumeResponse_Reply(ctrl *gomock.Controller) *MockisControllerPublishVolumeResponse_Reply {
	mock := &MockisControllerPublishVolumeResponse_Reply{ctrl: ctrl}
	mock.recorder = &_MockisControllerPublishVolumeResponse_ReplyRecorder{mock}
	return mock
}

func (_m *MockisControllerPublishVolumeResponse_Reply) EXPECT() *_MockisControllerPublishVolumeResponse_ReplyRecorder {
	return _m.recorder
}

func (_m *MockisControllerPublishVolumeResponse_Reply) isControllerPublishVolumeResponse_Reply() {
	_m.ctrl.Call(_m, "isControllerPublishVolumeResponse_Reply")
}

func (_mr *_MockisControllerPublishVolumeResponse_ReplyRecorder) isControllerPublishVolumeResponse_Reply() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "isControllerPublishVolumeResponse_Reply")
}

// Mock of isControllerUnpublishVolumeResponse_Reply interface
type MockisControllerUnpublishVolumeResponse_Reply struct {
	ctrl     *gomock.Controller
	recorder *_MockisControllerUnpublishVolumeResponse_ReplyRecorder
}

// Recorder for MockisControllerUnpublishVolumeResponse_Reply (not exported)
type _MockisControllerUnpublishVolumeResponse_ReplyRecorder struct {
	mock *MockisControllerUnpublishVolumeResponse_Reply
}

func NewMockisControllerUnpublishVolumeResponse_Reply(ctrl *gomock.Controller) *MockisControllerUnpublishVolumeResponse_Reply {
	mock := &MockisControllerUnpublishVolumeResponse_Reply{ctrl: ctrl}
	mock.recorder = &_MockisControllerUnpublishVolumeResponse_ReplyRecorder{mock}
	return mock
}

func (_m *MockisControllerUnpublishVolumeResponse_Reply) EXPECT() *_MockisControllerUnpublishVolumeResponse_ReplyRecorder {
	return _m.recorder
}

func (_m *MockisControllerUnpublishVolumeResponse_Reply) isControllerUnpublishVolumeResponse_Reply() {
	_m.ctrl.Call(_m, "isControllerUnpublishVolumeResponse_Reply")
}

func (_mr *_MockisControllerUnpublishVolumeResponse_ReplyRecorder) isControllerUnpublishVolumeResponse_Reply() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "isControllerUnpublishVolumeResponse_Reply")
}

// Mock of isValidateVolumeCapabilitiesResponse_Reply interface
type MockisValidateVolumeCapabilitiesResponse_Reply struct {
	ctrl     *gomock.Controller
	recorder *_MockisValidateVolumeCapabilitiesResponse_ReplyRecorder
}

// Recorder for MockisValidateVolumeCapabilitiesResponse_Reply (not exported)
type _MockisValidateVolumeCapabilitiesResponse_ReplyRecorder struct {
	mock *MockisValidateVolumeCapabilitiesResponse_Reply
}

func NewMockisValidateVolumeCapabilitiesResponse_Reply(ctrl *gomock.Controller) *MockisValidateVolumeCapabilitiesResponse_Reply {
	mock := &MockisValidateVolumeCapabilitiesResponse_Reply{ctrl: ctrl}
	mock.recorder = &_MockisValidateVolumeCapabilitiesResponse_ReplyRecorder{mock}
	return mock
}

func (_m *MockisValidateVolumeCapabilitiesResponse_Reply) EXPECT() *_MockisValidateVolumeCapabilitiesResponse_ReplyRecorder {
	return _m.recorder
}

func (_m *MockisValidateVolumeCapabilitiesResponse_Reply) isValidateVolumeCapabilitiesResponse_Reply() {
	_m.ctrl.Call(_m, "isValidateVolumeCapabilitiesResponse_Reply")
}

func (_mr *_MockisValidateVolumeCapabilitiesResponse_ReplyRecorder) isValidateVolumeCapabilitiesResponse_Reply() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "isValidateVolumeCapabilitiesResponse_Reply")
}

// Mock of isListVolumesResponse_Reply interface
type MockisListVolumesResponse_Reply struct {
	ctrl     *gomock.Controller
	recorder *_MockisListVolumesResponse_ReplyRecorder
}

// Recorder for MockisListVolumesResponse_Reply (not exported)
type _MockisListVolumesResponse_ReplyRecorder struct {
	mock *MockisListVolumesResponse_Reply
}

func NewMockisListVolumesResponse_Reply(ctrl *gomock.Controller) *MockisListVolumesResponse_Reply {
	mock := &MockisListVolumesResponse_Reply{ctrl: ctrl}
	mock.recorder = &_MockisListVolumesResponse_ReplyRecorder{mock}
	return mock
}

func (_m *MockisListVolumesResponse_Reply) EXPECT() *_MockisListVolumesResponse_ReplyRecorder {
	return _m.recorder
}

func (_m *MockisListVolumesResponse_Reply) isListVolumesResponse_Reply() {
	_m.ctrl.Call(_m, "isListVolumesResponse_Reply")
}

func (_mr *_MockisListVolumesResponse_ReplyRecorder) isListVolumesResponse_Reply() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "isListVolumesResponse_Reply")
}

// Mock of isGetCapacityResponse_Reply interface
type MockisGetCapacityResponse_Reply struct {
	ctrl     *gomock.Controller
	recorder *_MockisGetCapacityResponse_ReplyRecorder
}

// Recorder for MockisGetCapacityResponse_Reply (not exported)
type _MockisGetCapacityResponse_ReplyRecorder struct {
	mock *MockisGetCapacityResponse_Reply
}

func NewMockisGetCapacityResponse_Reply(ctrl *gomock.Controller) *MockisGetCapacityResponse_Reply {
	mock := &MockisGetCapacityResponse_Reply{ctrl: ctrl}
	mock.recorder = &_MockisGetCapacityResponse_ReplyRecorder{mock}
	return mock
}

func (_m *MockisGetCapacityResponse_Reply) EXPECT() *_MockisGetCapacityResponse_ReplyRecorder {
	return _m.recorder
}

func (_m *MockisGetCapacityResponse_Reply) isGetCapacityResponse_Reply() {
	_m.ctrl.Call(_m, "isGetCapacityResponse_Reply")
}

func (_mr *_MockisGetCapacityResponse_ReplyRecorder) isGetCapacityResponse_Reply() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "isGetCapacityResponse_Reply")
}

// Mock of isControllerProbeResponse_Reply interface
type MockisControllerProbeResponse_Reply struct {
	ctrl     *gomock.Controller
	recorder *_MockisControllerProbeResponse_ReplyRecorder
}

// Recorder for MockisControllerProbeResponse_Reply (not exported)
type _MockisControllerProbeResponse_ReplyRecorder struct {
	mock *MockisControllerProbeResponse_Reply
}

func NewMockisControllerProbeResponse_Reply(ctrl *gomock.Controller) *MockisControllerProbeResponse_Reply {
	mock := &MockisControllerProbeResponse_Reply{ctrl: ctrl}
	mock.recorder = &_MockisControllerProbeResponse_ReplyRecorder{mock}
	return mock
}

func (_m *MockisControllerProbeResponse_Reply) EXPECT() *_MockisControllerProbeResponse_ReplyRecorder {
	return _m.recorder
}

func (_m *MockisControllerProbeResponse_Reply) isControllerProbeResponse_Reply() {
	_m.ctrl.Call(_m, "isControllerProbeResponse_Reply")
}

func (_mr *_MockisControllerProbeResponse_ReplyRecorder) isControllerProbeResponse_Reply() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "isControllerProbeResponse_Reply")
}

// Mock of isControllerGetCapabilitiesResponse_Reply interface
type MockisControllerGetCapabilitiesResponse_Reply struct {
	ctrl     *gomock.Controller
	recorder *_MockisControllerGetCapabilitiesResponse_ReplyRecorder
}

// Recorder for MockisControllerGetCapabilitiesResponse_Reply (not exported)
type _MockisControllerGetCapabilitiesResponse_ReplyRecorder struct {
	mock *MockisControllerGetCapabilitiesResponse_Reply
}

func NewMockisControllerGetCapabilitiesResponse_Reply(ctrl *gomock.Controller) *MockisControllerGetCapabilitiesResponse_Reply {
	mock := &MockisControllerGetCapabilitiesResponse_Reply{ctrl: ctrl}
	mock.recorder = &_MockisControllerGetCapabilitiesResponse_ReplyRecorder{mock}
	return mock
}

func (_m *MockisControllerGetCapabilitiesResponse_Reply) EXPECT() *_MockisControllerGetCapabilitiesResponse_ReplyRecorder {
	return _m.recorder
}

func (_m *MockisControllerGetCapabilitiesResponse_Reply) isControllerGetCapabilitiesResponse_Reply() {
	_m.ctrl.Call(_m, "isControllerGetCapabilitiesResponse_Reply")
}

func (_mr *_MockisControllerGetCapabilitiesResponse_ReplyRecorder) isControllerGetCapabilitiesResponse_Reply() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "isControllerGetCapabilitiesResponse_Reply")
}

// Mock of isControllerServiceCapability_Type interface
type MockisControllerServiceCapability_Type struct {
	ctrl     *gomock.Controller
	recorder *_MockisControllerServiceCapability_TypeRecorder
}

// Recorder for MockisControllerServiceCapability_Type (not exported)
type _MockisControllerServiceCapability_TypeRecorder struct {
	mock *MockisControllerServiceCapability_Type
}

func NewMockisControllerServiceCapability_Type(ctrl *gomock.Controller) *MockisControllerServiceCapability_Type {
	mock := &MockisControllerServiceCapability_Type{ctrl: ctrl}
	mock.recorder = &_MockisControllerServiceCapability_TypeRecorder{mock}
	return mock
}

func (_m *MockisControllerServiceCapability_Type) EXPECT() *_MockisControllerServiceCapability_TypeRecorder {
	return _m.recorder
}

func (_m *MockisControllerServiceCapability_Type) isControllerServiceCapability_Type() {
	_m.ctrl.Call(_m, "isControllerServiceCapability_Type")
}

func (_mr *_MockisControllerServiceCapability_TypeRecorder) isControllerServiceCapability_Type() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "isControllerServiceCapability_Type")
}

// Mock of isNodePublishVolumeResponse_Reply interface
type MockisNodePublishVolumeResponse_Reply struct {
	ctrl     *gomock.Controller
	recorder *_MockisNodePublishVolumeResponse_ReplyRecorder
}

// Recorder for MockisNodePublishVolumeResponse_Reply (not exported)
type _MockisNodePublishVolumeResponse_ReplyRecorder struct {
	mock *MockisNodePublishVolumeResponse_Reply
}

func NewMockisNodePublishVolumeResponse_Reply(ctrl *gomock.Controller) *MockisNodePublishVolumeResponse_Reply {
	mock := &MockisNodePublishVolumeResponse_Reply{ctrl: ctrl}
	mock.recorder = &_MockisNodePublishVolumeResponse_ReplyRecorder{mock}
	return mock
}

func (_m *MockisNodePublishVolumeResponse_Reply) EXPECT() *_MockisNodePublishVolumeResponse_ReplyRecorder {
	return _m.recorder
}

func (_m *MockisNodePublishVolumeResponse_Reply) isNodePublishVolumeResponse_Reply() {
	_m.ctrl.Call(_m, "isNodePublishVolumeResponse_Reply")
}

func (_mr *_MockisNodePublishVolumeResponse_ReplyRecorder) isNodePublishVolumeResponse_Reply() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "isNodePublishVolumeResponse_Reply")
}

// Mock of isNodeUnpublishVolumeResponse_Reply interface
type MockisNodeUnpublishVolumeResponse_Reply struct {
	ctrl     *gomock.Controller
	recorder *_MockisNodeUnpublishVolumeResponse_ReplyRecorder
}

// Recorder for MockisNodeUnpublishVolumeResponse_Reply (not exported)
type _MockisNodeUnpublishVolumeResponse_ReplyRecorder struct {
	mock *MockisNodeUnpublishVolumeResponse_Reply
}

func NewMockisNodeUnpublishVolumeResponse_Reply(ctrl *gomock.Controller) *MockisNodeUnpublishVolumeResponse_Reply {
	mock := &MockisNodeUnpublishVolumeResponse_Reply{ctrl: ctrl}
	mock.recorder = &_MockisNodeUnpublishVolumeResponse_ReplyRecorder{mock}
	return mock
}

func (_m *MockisNodeUnpublishVolumeResponse_Reply) EXPECT() *_MockisNodeUnpublishVolumeResponse_ReplyRecorder {
	return _m.recorder
}

func (_m *MockisNodeUnpublishVolumeResponse_Reply) isNodeUnpublishVolumeResponse_Reply() {
	_m.ctrl.Call(_m, "isNodeUnpublishVolumeResponse_Reply")
}

func (_mr *_MockisNodeUnpublishVolumeResponse_ReplyRecorder) isNodeUnpublishVolumeResponse_Reply() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "isNodeUnpublishVolumeResponse_Reply")
}

// Mock of isGetNodeIDResponse_Reply interface
type MockisGetNodeIDResponse_Reply struct {
	ctrl     *gomock.Controller
	recorder *_MockisGetNodeIDResponse_ReplyRecorder
}

// Recorder for MockisGetNodeIDResponse_Reply (not exported)
type _MockisGetNodeIDResponse_ReplyRecorder struct {
	mock *MockisGetNodeIDResponse_Reply
}

func NewMockisGetNodeIDResponse_Reply(ctrl *gomock.Controller) *MockisGetNodeIDResponse_Reply {
	mock := &MockisGetNodeIDResponse_Reply{ctrl: ctrl}
	mock.recorder = &_MockisGetNodeIDResponse_ReplyRecorder{mock}
	return mock
}

func (_m *MockisGetNodeIDResponse_Reply) EXPECT() *_MockisGetNodeIDResponse_ReplyRecorder {
	return _m.recorder
}

func (_m *MockisGetNodeIDResponse_Reply) isGetNodeIDResponse_Reply() {
	_m.ctrl.Call(_m, "isGetNodeIDResponse_Reply")
}

func (_mr *_MockisGetNodeIDResponse_ReplyRecorder) isGetNodeIDResponse_Reply() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "isGetNodeIDResponse_Reply")
}

// Mock of isNodeProbeResponse_Reply interface
type MockisNodeProbeResponse_Reply struct {
	ctrl     *gomock.Controller
	recorder *_MockisNodeProbeResponse_ReplyRecorder
}

// Recorder for MockisNodeProbeResponse_Reply (not exported)
type _MockisNodeProbeResponse_ReplyRecorder struct {
	mock *MockisNodeProbeResponse_Reply
}

func NewMockisNodeProbeResponse_Reply(ctrl *gomock.Controller) *MockisNodeProbeResponse_Reply {
	mock := &MockisNodeProbeResponse_Reply{ctrl: ctrl}
	mock.recorder = &_MockisNodeProbeResponse_ReplyRecorder{mock}
	return mock
}

func (_m *MockisNodeProbeResponse_Reply) EXPECT() *_MockisNodeProbeResponse_ReplyRecorder {
	return _m.recorder
}

func (_m *MockisNodeProbeResponse_Reply) isNodeProbeResponse_Reply() {
	_m.ctrl.Call(_m, "isNodeProbeResponse_Reply")
}

func (_mr *_MockisNodeProbeResponse_ReplyRecorder) isNodeProbeResponse_Reply() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "isNodeProbeResponse_Reply")
}

// Mock of isNodeGetCapabilitiesResponse_Reply interface
type MockisNodeGetCapabilitiesResponse_Reply struct {
	ctrl     *gomock.Controller
	recorder *_MockisNodeGetCapabilitiesResponse_ReplyRecorder
}

// Recorder for MockisNodeGetCapabilitiesResponse_Reply (not exported)
type _MockisNodeGetCapabilitiesResponse_ReplyRecorder struct {
	mock *MockisNodeGetCapabilitiesResponse_Reply
}

func NewMockisNodeGetCapabilitiesResponse_Reply(ctrl *gomock.Controller) *MockisNodeGetCapabilitiesResponse_Reply {
	mock := &MockisNodeGetCapabilitiesResponse_Reply{ctrl: ctrl}
	mock.recorder = &_MockisNodeGetCapabilitiesResponse_ReplyRecorder{mock}
	return mock
}

func (_m *MockisNodeGetCapabilitiesResponse_Reply) EXPECT() *_MockisNodeGetCapabilitiesResponse_ReplyRecorder {
	return _m.recorder
}

func (_m *MockisNodeGetCapabilitiesResponse_Reply) isNodeGetCapabilitiesResponse_Reply() {
	_m.ctrl.Call(_m, "isNodeGetCapabilitiesResponse_Reply")
}

func (_mr *_MockisNodeGetCapabilitiesResponse_ReplyRecorder) isNodeGetCapabilitiesResponse_Reply() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "isNodeGetCapabilitiesResponse_Reply")
}

// Mock of isNodeServiceCapability_Type interface
type MockisNodeServiceCapability_Type struct {
	ctrl     *gomock.Controller
	recorder *_MockisNodeServiceCapability_TypeRecorder
}

// Recorder for MockisNodeServiceCapability_Type (not exported)
type _MockisNodeServiceCapability_TypeRecorder struct {
	mock *MockisNodeServiceCapability_Type
}

func NewMockisNodeServiceCapability_Type(ctrl *gomock.Controller) *MockisNodeServiceCapability_Type {
	mock := &MockisNodeServiceCapability_Type{ctrl: ctrl}
	mock.recorder = &_MockisNodeServiceCapability_TypeRecorder{mock}
	return mock
}

func (_m *MockisNodeServiceCapability_Type) EXPECT() *_MockisNodeServiceCapability_TypeRecorder {
	return _m.recorder
}

func (_m *MockisNodeServiceCapability_Type) isNodeServiceCapability_Type() {
	_m.ctrl.Call(_m, "isNodeServiceCapability_Type")
}

func (_mr *_MockisNodeServiceCapability_TypeRecorder) isNodeServiceCapability_Type() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "isNodeServiceCapability_Type")
}

// Mock of isError_Value interface
type MockisError_Value struct {
	ctrl     *gomock.Controller
	recorder *_MockisError_ValueRecorder
}

// Recorder for MockisError_Value (not exported)
type _MockisError_ValueRecorder struct {
	mock *MockisError_Value
}

func NewMockisError_Value(ctrl *gomock.Controller) *MockisError_Value {
	mock := &MockisError_Value{ctrl: ctrl}
	mock.recorder = &_MockisError_ValueRecorder{mock}
	return mock
}

func (_m *MockisError_Value) EXPECT() *_MockisError_ValueRecorder {
	return _m.recorder
}

func (_m *MockisError_Value) isError_Value() {
	_m.ctrl.Call(_m, "isError_Value")
}

func (_mr *_MockisError_ValueRecorder) isError_Value() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "isError_Value")
}

// Mock of IdentityClient interface
type MockIdentityClient struct {
	ctrl     *gomock.Controller
	recorder *_MockIdentityClientRecorder
}

// Recorder for MockIdentityClient (not exported)
type _MockIdentityClientRecorder struct {
	mock *MockIdentityClient
}

func NewMockIdentityClient(ctrl *gomock.Controller) *MockIdentityClient {
	mock := &MockIdentityClient{ctrl: ctrl}
	mock.recorder = &_MockIdentityClientRecorder{mock}
	return mock
}

func (_m *MockIdentityClient) EXPECT() *_MockIdentityClientRecorder {
	return _m.recorder
}

func (_m *MockIdentityClient) GetSupportedVersions(ctx context.Context, in *GetSupportedVersionsRequest, opts ...grpc.CallOption) (*GetSupportedVersionsResponse, error) {
	_s := []interface{}{ctx, in}
	for _, _x := range opts {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "GetSupportedVersions", _s...)
	ret0, _ := ret[0].(*GetSupportedVersionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockIdentityClientRecorder) GetSupportedVersions(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetSupportedVersions", _s...)
}

func (_m *MockIdentityClient) GetPluginInfo(ctx context.Context, in *GetPluginInfoRequest, opts ...grpc.CallOption) (*GetPluginInfoResponse, error) {
	_s := []interface{}{ctx, in}
	for _, _x := range opts {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "GetPluginInfo", _s...)
	ret0, _ := ret[0].(*GetPluginInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockIdentityClientRecorder) GetPluginInfo(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetPluginInfo", _s...)
}

// Mock of IdentityServer interface
type MockIdentityServer struct {
	ctrl     *gomock.Controller
	recorder *_MockIdentityServerRecorder
}

// Recorder for MockIdentityServer (not exported)
type _MockIdentityServerRecorder struct {
	mock *MockIdentityServer
}

func NewMockIdentityServer(ctrl *gomock.Controller) *MockIdentityServer {
	mock := &MockIdentityServer{ctrl: ctrl}
	mock.recorder = &_MockIdentityServerRecorder{mock}
	return mock
}

func (_m *MockIdentityServer) EXPECT() *_MockIdentityServerRecorder {
	return _m.recorder
}

func (_m *MockIdentityServer) GetSupportedVersions(_param0 context.Context, _param1 *GetSupportedVersionsRequest) (*GetSupportedVersionsResponse, error) {
	ret := _m.ctrl.Call(_m, "GetSupportedVersions", _param0, _param1)
	ret0, _ := ret[0].(*GetSupportedVersionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockIdentityServerRecorder) GetSupportedVersions(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetSupportedVersions", arg0, arg1)
}

func (_m *MockIdentityServer) GetPluginInfo(_param0 context.Context, _param1 *GetPluginInfoRequest) (*GetPluginInfoResponse, error) {
	ret := _m.ctrl.Call(_m, "GetPluginInfo", _param0, _param1)
	ret0, _ := ret[0].(*GetPluginInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockIdentityServerRecorder) GetPluginInfo(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetPluginInfo", arg0, arg1)
}

// Mock of ControllerClient interface
type MockControllerClient struct {
	ctrl     *gomock.Controller
	recorder *_MockControllerClientRecorder
}

// Recorder for MockControllerClient (not exported)
type _MockControllerClientRecorder struct {
	mock *MockControllerClient
}

func NewMockControllerClient(ctrl *gomock.Controller) *MockControllerClient {
	mock := &MockControllerClient{ctrl: ctrl}
	mock.recorder = &_MockControllerClientRecorder{mock}
	return mock
}

func (_m *MockControllerClient) EXPECT() *_MockControllerClientRecorder {
	return _m.recorder
}

func (_m *MockControllerClient) CreateVolume(ctx context.Context, in *CreateVolumeRequest, opts ...grpc.CallOption) (*CreateVolumeResponse, error) {
	_s := []interface{}{ctx, in}
	for _, _x := range opts {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "CreateVolume", _s...)
	ret0, _ := ret[0].(*CreateVolumeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockControllerClientRecorder) CreateVolume(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateVolume", _s...)
}

func (_m *MockControllerClient) DeleteVolume(ctx context.Context, in *DeleteVolumeRequest, opts ...grpc.CallOption) (*DeleteVolumeResponse, error) {
	_s := []interface{}{ctx, in}
	for _, _x := range opts {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "DeleteVolume", _s...)
	ret0, _ := ret[0].(*DeleteVolumeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockControllerClientRecorder) DeleteVolume(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteVolume", _s...)
}

func (_m *MockControllerClient) ControllerPublishVolume(ctx context.Context, in *ControllerPublishVolumeRequest, opts ...grpc.CallOption) (*ControllerPublishVolumeResponse, error) {
	_s := []interface{}{ctx, in}
	for _, _x := range opts {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "ControllerPublishVolume", _s...)
	ret0, _ := ret[0].(*ControllerPublishVolumeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockControllerClientRecorder) ControllerPublishVolume(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ControllerPublishVolume", _s...)
}

func (_m *MockControllerClient) ControllerUnpublishVolume(ctx context.Context, in *ControllerUnpublishVolumeRequest, opts ...grpc.CallOption) (*ControllerUnpublishVolumeResponse, error) {
	_s := []interface{}{ctx, in}
	for _, _x := range opts {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "ControllerUnpublishVolume", _s...)
	ret0, _ := ret[0].(*ControllerUnpublishVolumeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockControllerClientRecorder) ControllerUnpublishVolume(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ControllerUnpublishVolume", _s...)
}

func (_m *MockControllerClient) ValidateVolumeCapabilities(ctx context.Context, in *ValidateVolumeCapabilitiesRequest, opts ...grpc.CallOption) (*ValidateVolumeCapabilitiesResponse, error) {
	_s := []interface{}{ctx, in}
	for _, _x := range opts {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "ValidateVolumeCapabilities", _s...)
	ret0, _ := ret[0].(*ValidateVolumeCapabilitiesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockControllerClientRecorder) ValidateVolumeCapabilities(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ValidateVolumeCapabilities", _s...)
}

func (_m *MockControllerClient) ListVolumes(ctx context.Context, in *ListVolumesRequest, opts ...grpc.CallOption) (*ListVolumesResponse, error) {
	_s := []interface{}{ctx, in}
	for _, _x := range opts {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "ListVolumes", _s...)
	ret0, _ := ret[0].(*ListVolumesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockControllerClientRecorder) ListVolumes(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListVolumes", _s...)
}

func (_m *MockControllerClient) GetCapacity(ctx context.Context, in *GetCapacityRequest, opts ...grpc.CallOption) (*GetCapacityResponse, error) {
	_s := []interface{}{ctx, in}
	for _, _x := range opts {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "GetCapacity", _s...)
	ret0, _ := ret[0].(*GetCapacityResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockControllerClientRecorder) GetCapacity(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetCapacity", _s...)
}

func (_m *MockControllerClient) ControllerProbe(ctx context.Context, in *ControllerProbeRequest, opts ...grpc.CallOption) (*ControllerProbeResponse, error) {
	_s := []interface{}{ctx, in}
	for _, _x := range opts {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "ControllerProbe", _s...)
	ret0, _ := ret[0].(*ControllerProbeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockControllerClientRecorder) ControllerProbe(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ControllerProbe", _s...)
}

func (_m *MockControllerClient) ControllerGetCapabilities(ctx context.Context, in *ControllerGetCapabilitiesRequest, opts ...grpc.CallOption) (*ControllerGetCapabilitiesResponse, error) {
	_s := []interface{}{ctx, in}
	for _, _x := range opts {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "ControllerGetCapabilities", _s...)
	ret0, _ := ret[0].(*ControllerGetCapabilitiesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockControllerClientRecorder) ControllerGetCapabilities(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ControllerGetCapabilities", _s...)
}

// Mock of ControllerServer interface
type MockControllerServer struct {
	ctrl     *gomock.Controller
	recorder *_MockControllerServerRecorder
}

// Recorder for MockControllerServer (not exported)
type _MockControllerServerRecorder struct {
	mock *MockControllerServer
}

func NewMockControllerServer(ctrl *gomock.Controller) *MockControllerServer {
	mock := &MockControllerServer{ctrl: ctrl}
	mock.recorder = &_MockControllerServerRecorder{mock}
	return mock
}

func (_m *MockControllerServer) EXPECT() *_MockControllerServerRecorder {
	return _m.recorder
}

func (_m *MockControllerServer) CreateVolume(_param0 context.Context, _param1 *CreateVolumeRequest) (*CreateVolumeResponse, error) {
	ret := _m.ctrl.Call(_m, "CreateVolume", _param0, _param1)
	ret0, _ := ret[0].(*CreateVolumeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockControllerServerRecorder) CreateVolume(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateVolume", arg0, arg1)
}

func (_m *MockControllerServer) DeleteVolume(_param0 context.Context, _param1 *DeleteVolumeRequest) (*DeleteVolumeResponse, error) {
	ret := _m.ctrl.Call(_m, "DeleteVolume", _param0, _param1)
	ret0, _ := ret[0].(*DeleteVolumeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockControllerServerRecorder) DeleteVolume(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteVolume", arg0, arg1)
}

func (_m *MockControllerServer) ControllerPublishVolume(_param0 context.Context, _param1 *ControllerPublishVolumeRequest) (*ControllerPublishVolumeResponse, error) {
	ret := _m.ctrl.Call(_m, "ControllerPublishVolume", _param0, _param1)
	ret0, _ := ret[0].(*ControllerPublishVolumeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockControllerServerRecorder) ControllerPublishVolume(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ControllerPublishVolume", arg0, arg1)
}

func (_m *MockControllerServer) ControllerUnpublishVolume(_param0 context.Context, _param1 *ControllerUnpublishVolumeRequest) (*ControllerUnpublishVolumeResponse, error) {
	ret := _m.ctrl.Call(_m, "ControllerUnpublishVolume", _param0, _param1)
	ret0, _ := ret[0].(*ControllerUnpublishVolumeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockControllerServerRecorder) ControllerUnpublishVolume(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ControllerUnpublishVolume", arg0, arg1)
}

func (_m *MockControllerServer) ValidateVolumeCapabilities(_param0 context.Context, _param1 *ValidateVolumeCapabilitiesRequest) (*ValidateVolumeCapabilitiesResponse, error) {
	ret := _m.ctrl.Call(_m, "ValidateVolumeCapabilities", _param0, _param1)
	ret0, _ := ret[0].(*ValidateVolumeCapabilitiesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockControllerServerRecorder) ValidateVolumeCapabilities(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ValidateVolumeCapabilities", arg0, arg1)
}

func (_m *MockControllerServer) ListVolumes(_param0 context.Context, _param1 *ListVolumesRequest) (*ListVolumesResponse, error) {
	ret := _m.ctrl.Call(_m, "ListVolumes", _param0, _param1)
	ret0, _ := ret[0].(*ListVolumesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockControllerServerRecorder) ListVolumes(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListVolumes", arg0, arg1)
}

func (_m *MockControllerServer) GetCapacity(_param0 context.Context, _param1 *GetCapacityRequest) (*GetCapacityResponse, error) {
	ret := _m.ctrl.Call(_m, "GetCapacity", _param0, _param1)
	ret0, _ := ret[0].(*GetCapacityResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockControllerServerRecorder) GetCapacity(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetCapacity", arg0, arg1)
}

func (_m *MockControllerServer) ControllerProbe(_param0 context.Context, _param1 *ControllerProbeRequest) (*ControllerProbeResponse, error) {
	ret := _m.ctrl.Call(_m, "ControllerProbe", _param0, _param1)
	ret0, _ := ret[0].(*ControllerProbeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockControllerServerRecorder) ControllerProbe(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ControllerProbe", arg0, arg1)
}

func (_m *MockControllerServer) ControllerGetCapabilities(_param0 context.Context, _param1 *ControllerGetCapabilitiesRequest) (*ControllerGetCapabilitiesResponse, error) {
	ret := _m.ctrl.Call(_m, "ControllerGetCapabilities", _param0, _param1)
	ret0, _ := ret[0].(*ControllerGetCapabilitiesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockControllerServerRecorder) ControllerGetCapabilities(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ControllerGetCapabilities", arg0, arg1)
}

// Mock of NodeClient interface
type MockNodeClient struct {
	ctrl     *gomock.Controller
	recorder *_MockNodeClientRecorder
}

// Recorder for MockNodeClient (not exported)
type _MockNodeClientRecorder struct {
	mock *MockNodeClient
}

func NewMockNodeClient(ctrl *gomock.Controller) *MockNodeClient {
	mock := &MockNodeClient{ctrl: ctrl}
	mock.recorder = &_MockNodeClientRecorder{mock}
	return mock
}

func (_m *MockNodeClient) EXPECT() *_MockNodeClientRecorder {
	return _m.recorder
}

func (_m *MockNodeClient) NodePublishVolume(ctx context.Context, in *NodePublishVolumeRequest, opts ...grpc.CallOption) (*NodePublishVolumeResponse, error) {
	_s := []interface{}{ctx, in}
	for _, _x := range opts {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "NodePublishVolume", _s...)
	ret0, _ := ret[0].(*NodePublishVolumeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockNodeClientRecorder) NodePublishVolume(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "NodePublishVolume", _s...)
}

func (_m *MockNodeClient) NodeUnpublishVolume(ctx context.Context, in *NodeUnpublishVolumeRequest, opts ...grpc.CallOption) (*NodeUnpublishVolumeResponse, error) {
	_s := []interface{}{ctx, in}
	for _, _x := range opts {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "NodeUnpublishVolume", _s...)
	ret0, _ := ret[0].(*NodeUnpublishVolumeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockNodeClientRecorder) NodeUnpublishVolume(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "NodeUnpublishVolume", _s...)
}

func (_m *MockNodeClient) GetNodeID(ctx context.Context, in *GetNodeIDRequest, opts ...grpc.CallOption) (*GetNodeIDResponse, error) {
	_s := []interface{}{ctx, in}
	for _, _x := range opts {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "GetNodeID", _s...)
	ret0, _ := ret[0].(*GetNodeIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockNodeClientRecorder) GetNodeID(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetNodeID", _s...)
}

func (_m *MockNodeClient) NodeProbe(ctx context.Context, in *NodeProbeRequest, opts ...grpc.CallOption) (*NodeProbeResponse, error) {
	_s := []interface{}{ctx, in}
	for _, _x := range opts {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "NodeProbe", _s...)
	ret0, _ := ret[0].(*NodeProbeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockNodeClientRecorder) NodeProbe(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "NodeProbe", _s...)
}

func (_m *MockNodeClient) NodeGetCapabilities(ctx context.Context, in *NodeGetCapabilitiesRequest, opts ...grpc.CallOption) (*NodeGetCapabilitiesResponse, error) {
	_s := []interface{}{ctx, in}
	for _, _x := range opts {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "NodeGetCapabilities", _s...)
	ret0, _ := ret[0].(*NodeGetCapabilitiesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockNodeClientRecorder) NodeGetCapabilities(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "NodeGetCapabilities", _s...)
}

// Mock of NodeServer interface
type MockNodeServer struct {
	ctrl     *gomock.Controller
	recorder *_MockNodeServerRecorder
}

// Recorder for MockNodeServer (not exported)
type _MockNodeServerRecorder struct {
	mock *MockNodeServer
}

func NewMockNodeServer(ctrl *gomock.Controller) *MockNodeServer {
	mock := &MockNodeServer{ctrl: ctrl}
	mock.recorder = &_MockNodeServerRecorder{mock}
	return mock
}

func (_m *MockNodeServer) EXPECT() *_MockNodeServerRecorder {
	return _m.recorder
}

func (_m *MockNodeServer) NodePublishVolume(_param0 context.Context, _param1 *NodePublishVolumeRequest) (*NodePublishVolumeResponse, error) {
	ret := _m.ctrl.Call(_m, "NodePublishVolume", _param0, _param1)
	ret0, _ := ret[0].(*NodePublishVolumeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockNodeServerRecorder) NodePublishVolume(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "NodePublishVolume", arg0, arg1)
}

func (_m *MockNodeServer) NodeUnpublishVolume(_param0 context.Context, _param1 *NodeUnpublishVolumeRequest) (*NodeUnpublishVolumeResponse, error) {
	ret := _m.ctrl.Call(_m, "NodeUnpublishVolume", _param0, _param1)
	ret0, _ := ret[0].(*NodeUnpublishVolumeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockNodeServerRecorder) NodeUnpublishVolume(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "NodeUnpublishVolume", arg0, arg1)
}

func (_m *MockNodeServer) GetNodeID(_param0 context.Context, _param1 *GetNodeIDRequest) (*GetNodeIDResponse, error) {
	ret := _m.ctrl.Call(_m, "GetNodeID", _param0, _param1)
	ret0, _ := ret[0].(*GetNodeIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockNodeServerRecorder) GetNodeID(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetNodeID", arg0, arg1)
}

func (_m *MockNodeServer) NodeProbe(_param0 context.Context, _param1 *NodeProbeRequest) (*NodeProbeResponse, error) {
	ret := _m.ctrl.Call(_m, "NodeProbe", _param0, _param1)
	ret0, _ := ret[0].(*NodeProbeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockNodeServerRecorder) NodeProbe(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "NodeProbe", arg0, arg1)
}

func (_m *MockNodeServer) NodeGetCapabilities(_param0 context.Context, _param1 *NodeGetCapabilitiesRequest) (*NodeGetCapabilitiesResponse, error) {
	ret := _m.ctrl.Call(_m, "NodeGetCapabilities", _param0, _param1)
	ret0, _ := ret[0].(*NodeGetCapabilitiesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockNodeServerRecorder) NodeGetCapabilities(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "NodeGetCapabilities", arg0, arg1)
}
